group 'uk.ac.ebi.subs'
version '0.4.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'maven'
apply plugin: 'application'
apply plugin: 'org.hidetake.ssh'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://repo.spring.io/plugins-release' }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.10.RELEASE")
        classpath 'io.spring.gradle:propdeps-plugin:0.0.9.RELEASE'
        classpath 'org.hidetake:gradle-ssh-plugin:1.1.3'
    }
}

dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-amqp'
    compile 'com.github.spullara.mustache.java:compiler:0.9.5'
    compile 'org.springframework.boot:spring-boot-starter-mail'

    compile "org.springframework.boot:spring-boot-configuration-processor"

    compileOnly group: 'org.projectlombok', name: 'lombok'

    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
}

compileJava.dependsOn(processResources)

bootRepackage {
    mainClass = "uk.ac.ebi.subs.dlqemailer.DeadLetterEmailerApplication"
}

springBoot {
    executable = true
}

ext.gradle_env = hasProperty('env') ? env : 'dev'

ssh.settings {
    user = 'sub_adm'
}

if (project.hasProperty('sshKeyFile')) {
    ssh.settings.identity = new File(sshKeyFile)
}

if (project.hasProperty('sshPassphrase')) {
    ssh.settings.passphrase = sshPassphrase
}

task printJarName {
    doLast {
        println "$jar.archivePath.name"
    }

}

task printJarFullPath {
    doLast {
        println "$jar.archivePath.absolutePath"
    }
}

remotes {
    subs_dead_letter_notifier_dev {
        role('dev')
        println "DEBUG: project name -> $project.name"
        host = project.hasProperty(project.name + "DevDeployTarget") ? getProperty(project.name + "DevDeployTarget") : 'localhost'
    }
    subs_dead_letter_notifier_test {
        role('test')
        host = project.hasProperty(project.name + "TestDeployTarget") ? getProperty(project.name + "TestDeployTarget") : 'localhost'
    }
    subs_dead_letter_notifier_prod {
        role('prod')
        host = project.hasProperty(project.name + "ProdDeployTarget") ? getProperty(project.name + "ProdDeployTarget") : 'localhost'
    }
}

task deployJar(type: SshTask, dependsOn: 'assemble') {
    doLast {
        File jarDeployDir = new File("/data/$gradle_env/$project.name/jar")
        sshRun(jarDeployDir)
    }
    ssh.settings {
        knownHosts = allowAnyHosts
    }
}

private Object sshRun(File jarDeployDir) {
    ssh.run {
        session(remotes.role(gradle_env)) {
            execute "/homes/sub_adm/create_dirs.sh $gradle_env $project.name", ignoreError: false
            def jarFileName = project.name + "-"  + project.version + "." + System.currentTimeMillis() + ".jar"
            File jarDeployFile = new File("/data/$env/$project.name/jar",jarFileName)
            println "Uploading jar $jar.archivePath.name to $jarDeployFile.absolutePath area on $remote"
            put(jar.archivePath.absolutePath, jarDeployFile.absolutePath)
            println "creating symbolic link to $jar.archiveName" + "_$env"
            def result = execute "ln -s -f $jarDeployFile.absolutePath $jarDeployDir/$jar.baseName" + "_${env}.jar", ignoreError: true
            println result
            println "updating permissions of $jarDeployDir/$jar.archiveName" + "_$env"
            execute "chmod u+x $jarDeployDir/*", ignoreError: false
        }
    }
}
